Lab 13 Implementation

Author: Alicia Stanton
Date: November 10, 2020



1) If the second/third conditions were evaluated before the first, 
	you may be out of bounds with the (x,y) coordinates. If the 
	third condition is executed before the second, you've failed
	to check whether the current cell has already been visited
	or is part of the barrier.
	

2) The order in which the neighbor cells are tested does not matter,
	and this order will not change the path through the maze.

	
	
3) Yes, Figure 5.19 shows the shortest path to the exit of the maze.



Programming

1) 
	import java.awt.Color;
	
	public interface GridColors
	{
		Color PATH = Color.white;
		Color TEMPORARY = Color.black;
		Color ABNORMAL = Color.light_gray;
		Color BACKGROUND = Color.dark_gray;
	}
	
	



2) 
	public resetTemp(int x, int y)
	{
		// Make sure that the coordinate is within bounds
		if(x >= maze.getNCols() || y >= maze.getNRows())
		{
			return;
		}
		
		else 
		{
			// Check the coordinates
			if(maze.getColor(x,y).equals(TEMPORARY))
			{
				maze.recolor(x,y,BACKGROUND);
			}
			
			// Move to the next row
			resetTemp(x, y+1);
			
			// Move to the next column 
			resetTemp(x+1, y);
		}
		
	}
	

	3) 
		public void restore()
		{
			// Call resetTemp - starting at top left corner
			resetTemp(0,0);
			
			// Then recolor
			maze.recolor(PATH, BACKGROUND);
		}